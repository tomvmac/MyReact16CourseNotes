Component Deep Dive:


In general, container components like App.js, the render method should be rather lean and not include that much details on other components.  

Need to further break down the components composition.

--------------------------------------------------------------------------------------------------------------------------------

Structure:

/containers  - React container components, that manages and manipulates state, event handlers
/components  - React components - presentation only components
/assets - images, etc.


--------------------------------------------------------------------------------------------------------------------------------

Refactored Persons component:

import React from "react";
import Person from './Person/Person';

// omitt return statement in es6 arrow function
const Persons = props =>
  props.persons.map((person, index) => {
    return (
      <Person
        click={() => props.clicked(index)}
        name={person.name}
        age={person.age}
        key={person.id}
        changed={event => props.changed(event, person.id)}
      />
    );
  });

  export default Persons;
  
  
// usage
<div>
	<Persons 
	  persons={this.state.persons}
	  clicked={this.deletePersonHandler}
	  changed={this.nameChangeHandler}
	/>
</div>  
-------------------------------------------------------------

Stateless vs Stateful Components:

Stateful Components 
- Class Components
- Access to State  
- Lifecycle Hooks

Stateless Components
- Function Components
- Access to Props (only no state)

--------------------------------------------------------------------------------------------------------------------------------

Component Lifecycle:

https://reactjs.org/docs/react-component.html

Component Creation:
- constructor
	- Call super(props)
	- Initialize state
	- Do not and should not cause side effects like (calling external API)
- componentWillMount
	- Update state
	- Last minute optimization
	- Don't cause side effects	
- render
	- Prepare & structure jsx code
	- Render child components
- componentDidMount
	- Can cause side effects
	- Don't update state (triggers re-render)
	
-------------------------------------------------------------	
	
Component Update (triggered by Parent:
- componentWillReceiveProps
	- sync state with props
	- don't creat side effects, no api calls
- shouldComponentUpdate
	- nextProps, nextState
	- may cancel updating - may save on performance by not having to re-load
	- sync state to props
- componentWillUpdate
	
- render
- update Child component props
- componentDidUpdate
	
-------------------------------------------------------------
Component Update (triggered by Internal Change, state change):	
	
- shouldComponentUpdate
	- decide to continue or not
- componentWillUpdate
	- sync state to props
- render
	- update child component props
	- prepare and structure jsx code
- componentDidUpdate

* Note componentWillReceiveProps is not called for internal changes.
	
-------------------------------------------------------------

Convert Persons from function component to a Class component to demo the life cycle methods.

- Added life cycle methods to App.js and init state in constructor.

--------------------------------------------------------------------------------------------------------------------------------

PureComponent:

Use PureComponent when updates are not required.

https://stackoverflow.com/questions/41340697/react-component-vs-react-purecomponent


--------------------------------------------------------------------------------------------------------------------------------

How does React Updates the DOM:

Compare virtual doms (old virtual dom vs re-rendered virtual dom)

- re-rendered dom is created whenever the render() method is called.
- detect diff
- React will only change the real DOM and ONLY make the differences

--------------------------------------------------------------------------------------------------------------------------------

Jsx rendering:

- multiple elements must be wrapped within a <div>
- exception would be an array with multiple elements within.

-------------------------------------------------------------
Another way around it would be to create a component that holds props.children:

// Aux Component
const aux = (props) => props.children;
export default aux;


// Using Aux Component to wrap, so there is no extra html div tag
<Aux>
	<p>...</p>
	<p>...</p>
</Aux>

-------------------------------------------------------------

React 16 - Fragments feature:
<>
    <h1>First Element</h1>
    <h1>Second Element</h1>
</>


--------------------------------------------------------------------------------------------------------------------------------

How to pass on existing props:

// pass on the props from parent to children components
<WrappedComonent {...props} />

--------------------------------------------------------------------------------------------------------------------------------

Using setState when it needs to get the previous state or mutating state:

ex) increment state variable 

this.setState( (prevState, props) => {
	return {
		toggleClicked: prevState.toggleClicked + 1
	}
});

Note: Never use setState and using this.state.something, because setState is done async

--------------------------------------------------------------------------------------------------------------------------------

How to check and validate incoming props:

// npm library
npm --save prop-types

// import prop-types lib into your Component
import PropTypes from "prop-types";

// put PropTypes at the end of the class outside of the class definition
Person.propTypes = {
  click: PropTypes.func,
  name: PropTypes.string,
  age: PropTypes.number,
  changed: PropTypes.func
};

Resources Links:
https://reactjs.org/docs/typechecking-with-proptypes.html


--------------------------------------------------------------------------------------------------------------------------------

References:

Use Case:
- How to access a html element like input tag and then focus to it? 


Usage:

 <input 
  ref={(inputElement) => {this.nameInput = inputElement}}
  type="text" 
  onChange={this.props.changed}
  value={this.props.name} />

  
componentDidMount() {
console.log("Person.js -> componentDidMount");
// check for position of Person in Persons and only focus on first Person 
if (this.props.position ===0){
  this.nameInput.focus();
}

}
		  
		  
Notes:
Can be used to html and custom Components

Resources:

https://reactjs.org/docs/refs-and-the-dom.html


--------------------------------------------------------------------------------------------------------------------------------

React 16 New Features:




	

